// counter.test.js
import React from 'react';
import { createStore } from 'redux';
import '@testing-library/jest-dom/extend-expect';
import 'react-redux';

import { render, fireEvent, screen, waitFor } from '../utils/test-utils';
import Success from './Success';

const mockHistoryPush = jest.fn();
jest.mock('react-router-dom', () => ({
  useHistory: () => ({
    push: mockHistoryPush
  })
}));

jest.mock('react-redux', () => ({
  useDispatch: jest.fn()
}));

jest.mock('../Navbar/Navbar', () => () => null);

test('redirects from Success component to shop with redux with defaults on load', () => {
  render(<Success />);
  expect(mockHistoryPush).toBeCalledWith(`/shop`);
});

// test('can render with redux with custom initial state', () => {
//   render(<Counter />, {
//     initialState: { count: 3 },
//   })
//   fireEvent.click(screen.getByText('-'))
//   expect(screen.getByTestId('count-value')).toHaveTextContent('2')
// })

// test('can render with redux with custom store', () => {
//   // this is a silly store that can never be changed
//   const store = createStore(() => ({ count: 1000 }))
//   render(<Counter />, {
//     store,
//   })
//   fireEvent.click(screen.getByText('+'))
//   expect(screen.getByTestId('count-value')).toHaveTextContent('1000')
//   fireEvent.click(screen.getByText('-'))
//   expect(screen.getByTestId('count-value')).toHaveTextContent('1000')
// })
