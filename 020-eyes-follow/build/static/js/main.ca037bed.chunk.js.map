{"version":3,"sources":["components/Face.module.css","assets/cinnamoroll.png","assets/cinnamoroll-happy.png","components/Face.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Face","useState","x","setX","y","setY","smile","setSmile","leftEye","useRef","className","styles","onMouseMove","e","screenX","nativeEvent","clientX","screenY","clientY","faceX","current","offsetLeft","moveY","offsetTop","LeftEye","ref","style","transform","RightEye","onClick","src","HappyFaceImage","alt","faceImage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,sBAAsB,SAAW,yB,mBCDvFD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,sNCkD5BC,EA5CF,WAAO,IAAD,EAEGC,mBAAS,GAFZ,mBAERC,EAFQ,KAELC,EAFK,OAGGF,mBAAS,GAHZ,mBAGRG,EAHQ,KAGLC,EAHK,OAIUJ,oBAAS,GAJnB,mBAITK,EAJS,KAIFC,EAJE,KAKTC,EAAUC,iBAAO,MAmBvB,OACI,yBAAKC,UAAWC,IAAOX,KAAMY,YAlBZ,SAACC,GAClB,IAAMC,EAAUD,EAAEE,YAAYC,QACxBC,EAAUJ,EAAEE,YAAYG,QAExBC,EAAQX,EAAQY,QAAQC,WAAa,GAIrCC,GAASL,GAHDT,EAAQY,QAAQG,UAAY,KAGR,IAClCpB,GAFeW,EAAUK,GAAS,KAGlCd,EAAKiB,KASD,yBACIZ,UAAWC,IAAOa,QAAQ,WAC1BC,IAAKjB,EACLkB,MAAO,CACHC,UAAU,aAAD,OAAezB,EAAf,eAAuBE,EAAvB,wBAEjB,yBACIM,UAAWC,IAAOiB,SAAS,WAC3BF,MAAO,CACHC,UAAU,aAAD,OAAezB,EAAf,eAAuBE,EAAvB,wBAEjB,yBAAKyB,QAfK,kBAAMtB,GAAUD,KAgBzBA,EAAQ,yBAAKwB,IAAKC,IAAgBC,IAAI,gBAAmB,yBAAKF,IAAKG,IAAWD,IAAI,mBC/BhFE,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCIcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ca037bed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Face\":\"Face_Face__BpaYd\",\"LeftEye\":\"Face_LeftEye__YzmMw\",\"RightEye\":\"Face_RightEye__xvgbq\"};","module.exports = __webpack_public_path__ + \"static/media/cinnamoroll.82a70c8a.png\";","module.exports = __webpack_public_path__ + \"static/media/cinnamoroll-happy.c823c77a.png\";","import React, {useState, useRef} from 'react';\r\n\r\nimport faceImage from '../assets/cinnamoroll.png';\r\nimport HappyFaceImage from '../assets/cinnamoroll-happy.png';\r\nimport styles from './Face.module.css';\r\n\r\nconst Face = () => {\r\n\r\n    const [x, setX] = useState(0);\r\n    const [y, setY] = useState(0);\r\n    const[smile, setSmile] = useState(false);\r\n    const leftEye = useRef(null);\r\n\r\n    const followCursor = (e) => {\r\n        const screenX = e.nativeEvent.clientX;\r\n        const screenY = e.nativeEvent.clientY;\r\n        // Middle of page = leftEye.current.offsetLeft + 65, leftEye.current.offsetTop + 15\r\n        const faceX = leftEye.current.offsetLeft + 65;\r\n        const faceY = leftEye.current.offsetTop + 15;\r\n\r\n        const moveX = (screenX - faceX) / 120;\r\n        const moveY = (screenY - faceY) / 120;\r\n        setX(moveX);\r\n        setY(moveY);\r\n    }\r\n\r\n    // Change image\r\n\r\n    const changePic = () => setSmile(!smile);\r\n\r\n    return (\r\n        <div className={styles.Face} onMouseMove={followCursor}>\r\n            <div \r\n                className={styles.LeftEye+' EyeRoll'}   \r\n                ref={leftEye}            \r\n                style={{\r\n                    transform: `translate(${x}px, ${y}px) rotate(10deg)`\r\n            }}/>\r\n            <div \r\n                className={styles.RightEye+' EyeRoll'} \r\n                style={{\r\n                    transform: `translate(${x}px, ${y}px) rotate(10deg)`\r\n            }}/>\r\n            <div onClick={changePic}>\r\n            {smile ? <img src={HappyFaceImage} alt=\"cinnamoroll\" /> : <img src={faceImage} alt=\"cinnamoroll\" />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Face;","import React from 'react';\n\nimport './App.css';\nimport Face from './components/Face';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Face />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}